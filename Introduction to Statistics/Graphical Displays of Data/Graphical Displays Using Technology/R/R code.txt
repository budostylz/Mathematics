The programming code for Statistics lesson 2.5 is below. 
You can copy the code from this file, and paste it into R.
_________________________________________________________________________________________
Slide 10:
Manually Enter a Data Set into R:

Type the following three lines of code into the console and press the return key:

dataset <- c(18, 19, 23,19, 24, 20, 18, 21, 22, 23,18, 27,19, 21, 20, 28, 26, 20, 30, 31, 
25, 34, 23, 24, 26, 20, 18, 19, 23, 25)

The code above will store the data set {18, 19, 23,19, 24, 20, 18, 21, 22, 23,18, 27,19, 
21, 20, 28, 26, 20, 30,31, 25, 34, 23, 24, 26, 20, 18, 19, 23, 25} into a variable called 
dataset. 

Type the following into the console and press the return key:  dataset

The program should output the data set back to you.

_________________________________________________________________________________________
Slide 12:
Copying a Data Set Into R:

First type the following command into the R console and press the return key: 
dataset <- scan() 

Then type each data value individually using the enter key after each data value. When 
you have entered the last data value, hit the enter key twice. Another option is to just 
to copy and paste one of the following two codes:

dataset <- scan()
18 19 23 19 24 20 18 21 22 23 18 27 19 21 20 28 26 20 30 31 25 34 23 24 26 20 18 19 23 25

dataset <- scan(sep=",") 
18, 19, 23, 19, 24, 20, 18, 21, 22, 23, 18, 27, 19, 21, 20, 28, 26, 20, 30, 31, 25, 34, 23, 24, 26, 20, 18, 19, 23, 25

_________________________________________________________________________________________
Slide 13:
Copying a Data Set Into R (Continued):

Type the following into the console and press the return key:  dataset

The program should output the data set back to you.

_________________________________________________________________________________________
Slide 14:
Reading a Text File Into R:

The following three commands will import data from a text file where the data is 
separated by a comma, space, or tab respectively:

dataset <- read.table("filename.txt", sep=",")

dataset <- read.table("filename.txt", sep=" ")

dataset <- read.table("filename.txt", sep="\t")

Note: You will need to replace filename.txt with the actual name of your file. You can 
try this by creating your own text file containing the data set. You must make sure your 
working directory is properly set. Go to the "Misc" menu at the top of the program and 
select "Change Working Directory". Then select the directory that contains your text file. 

__________________________________________________________________________
Slide 15:
Reading a CSV File Into R:

To read in a .csv file, use the following command:

dataset = read.csv("filename.csv")

Note: You will need to replace filename.csv with the actual name of your file. 

_________________________________________________________________________________________
Slide 16:
Frequency Distribution in R:

To obtain a frequency distribution using the data set we manually entered into R, type 
the following command and press the return key: table(dataset)

Note: For the table command, the data does not need to be quantitative. For example, try 
the following code:

dataset2 <- c("brown", "red", "brown", "green", "blue", "red", "black", "red", 
"brown", "blue")

table(dataset2)

_________________________________________________________________________________________
Slide 17:
Relative Frequency Distribution in R:

To obtain a relative frequency distribution using the data set we just entered into R, 
type the following command and press the return key: 

table(dataset2)/length(dataset2)

Note: The command 'length(dataset)' returns the number of observations in the data set. 
So when we type the command table(dataset)/length(dataset) it takes the frequencies and 
divides them by the number of observations in the data set thus giving us the relative 
frequencies.

_________________________________________________________________________________________
Slide 18:
Frequency Histogram in R:

Type the following command into R and press the return key: hist(dataset)

You should see a frequency histogram pop up. However, the histogram doesnâ€™t look exactly 
like how we made them earlier in chapter 2. 

Suppose I want to label the x-axis with "Age", label the y-axis with "Frequency", and 
title the graph with "Frequency Histogram of Age". In addition, I want to define the 
boundary points  {17.5,20.5,23.5,26.5,29.5,32.5,35.5} to be ticked on the x-axis only. 
The code to do all of this is a bit complicated but is on the next slide.

_________________________________________________________________________________________
Slide 19:
Frequency Histogram in R (Continued):

h <- hist(dataset, plot=FALSE, breaks=seq(17.5, 35.5,by=3))
plot(h$breaks,c(0,h$counts), type="n", xaxt="n", main="Frequency Histogram of Age", 
xlab="Age", ylab="Frequency",xaxt="n")
lines(h)
axis(side=1, col="black", at=h$breaks)

Remember: Copying and pasting code into R is sometimes problematic. Review slide 11 to 
see some options.

_________________________________________________________________________________________
Slide 20:
Frequency Histogram in R (Continued):

Suppose we want the class width to be 4 instead of 3. Then the boundary points are now 
{17.5,21.5,25.5,29.5,33.5,37.5}. Use the following code:

h <- hist(dataset, plot=FALSE, breaks=seq(17.5, 37.5,by=4))
plot(h$breaks,c(0,h$counts), type="n", xaxt="n", main="Frequency Histogram of Age", 
xlab="Age", ylab="Frequency",xaxt="n")
lines(h)
axis(side=1, col="black", at=h$breaks)

_________________________________________________________________________________________
Slide 21:
Frequency Histogram in R (Continued):

Suppose we want each data value to be used as a class rather than use intervals of 
numbers as the classes.  Then the boundary points are now {17.5,18.5,19.5, â€¦ ,34.5}. 
Use the following code:

h <- hist(dataset, plot=FALSE, breaks=seq(17.5, 34.5,by=1))
plot(h$mids,h$counts, type="n", xaxt="n", main="Frequency Histogram of Age", xlab="Age", 
ylab="Frequency",xaxt="n")
lines(h)
axis(side=1, col="black", at=h$mids)

_________________________________________________________________________________________
Slide 22:
Relative Frequency Histogram in R:

Type the following command into R and press the return key: hist(dataset, freq=FALSE)

You should see a relative frequency histogram pop up. However, in R, relative frequency 
means something different (it refers to a probability which we will discuss later in the 
course). So we need to trick R to do what we want.

The next two slides has the modified code to convert the previous three frequency 
histograms to relative frequency histograms. 

_________________________________________________________________________________________
Slide 23:
Relative Frequency Histogram in R (Continued):

h <- hist(dataset, plot=FALSE, breaks=seq(17.5, 35.5,by=3))
rfreqs <- h$counts/sum(h$counts)
h$counts <- rfreqs
plot(h$breaks,c(0,rfreqs), type="n", xaxt="n", main="Relative Frequency Histogram of Age", 
xlab="Age", ylab="Relative Frequency",xaxt="n")
lines(h)
axis(side=1, col="black", at=h$breaks)


h <- hist(dataset, plot=FALSE, breaks=seq(17.5, 37.5,by=4))
rfreqs <- h$counts/sum(h$counts)
h$counts <- rfreqs
plot(h$breaks,c(0,rfreqs), type="n", xaxt="n", main="Relative Frequency Histogram of Age", 
xlab="Age", ylab="Relative Frequency",xaxt="n")
lines(h)
axis(side=1, col="black", at=h$breaks)

_________________________________________________________________________________________
Slide 24:
Relative Frequency Histogram in R (Continued):

h <- hist(dataset, plot=FALSE, breaks=seq(17.5, 34.5,by=1))
rfreqs <- h$counts/sum(h$counts)
h$counts <- rfreqs
plot(h$mids,rfreqs, type="n", xaxt="n", main="Relative Frequency Histogram of Age", 
xlab="Age", ylab="Relative Frequency",xaxt="n")
lines(h)
axis(side=1, col="black", at=h$mids)

_________________________________________________________________________________________
Slide 25:
Dot Plot in R:

To obtain a dot plot of the data set in R, type the following command:

stripchart(dataset,method="stack",pch=20,
at=0,bg="black",col="black",offset=.5, cex=1.2 ,xaxt="n", frame.plot=FALSE, xlab="Age")
axis(side=1, col="black", at=seq(18, 34, by=1))


Note: Feel free to change parts of the code to see what happens. For example, you could 
change pch=20 to pch=17, or you could change offset=.5 to offset=2, or you could change 
col="black" to col="red", etc.

_________________________________________________________________________________________
Slide 26:
Stem and Leaf Plot in R:

To obtain a stem and leaf plot of the data set in R, type the following command: 
stem(dataset)

_________________________________________________________________________________________
Slide 27:
Pie Chart in R:
The eye color of ten students was recorded. The data set is given as follows: 
{brown, brown, blue, green, brown, hazel, brown, green, brown, brown}. How can we use R 
to construct a pie chart of eye color? Use the following code:

slices <- c(6, 1, 2, 1) 
pct <- round(slices/sum(slices)*100)
lbls <- c("Brown", "Blue", "Green", "Hazel")
lbls <- paste(lbls, pct) 
lbls <- paste(lbls,"%",sep="") 
pie(slices,labels=lbls,main="Pie Chart of Eye Color", col=c("saddlebrown", "blue3", 
"green4", "olivedrab3"))

Note: c(6, 1, 2, 1) represents the frequencies of the Brown, Blue, Green, and Hazel 
class respectively. 

_________________________________________________________________________________________
Slide 28:
Final Thoughts:
Graphical displays in R are actually one of the hardest things to do because there are 
so many options and possibilities. Play around with the codes provided in this section. 
See if you can modify the code and still get it to work.

For official documentation on the commands we have been using, you will want to type any 
of the following commands:

help(table)
help(hist)
help(plot)
help(stripchart)
help(pie)
ÛGßNûëŽ÷éçã}8ed==